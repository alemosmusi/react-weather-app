{"version":3,"sources":["WeatherTemperature.js","WeatherIcon.js","CurrentWeather.js","Search.js","Toggle.js","FormattedDate.js","WeatherForecastDay.js","WeatherForecast.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherTemperature","props","className","celsius","WeatherIcon","codeMapping","clearDay","clearNight","partlyCloudyDay","partlyCloudyNight","cloudy","rain","partlyCloudyDayRain","partlyCloudyNightRain","thunderstorms","partlyCloudyDaySnow","partlyCloudyNightSnow","mist","src","code","alt","CurrentWeather","weatherData","ready","temperature","description","icon","humidity","wind","Search","useState","city","setCity","onSubmit","event","preventDefault","searchByCity","type","placeholder","onChange","target","value","onClick","navigator","geolocation","getCurrentPosition","searchByLocation","Toggle","id","isChecked","checked","toggleHandler","for","FormattedDate","date","month","getMonth","getDate","day","getDay","hours","getHours","minutes","getMinutes","WeatherForecastDay","Date","data","dt","weather","Math","round","temp","max","maxTemp","min","minTemp","WeatherForecast","loaded","setLoaded","forecast","setForecast","handleResponse","response","console","log","daily","useEffect","coordinates","map","dailyForecast","index","longitude","lon","latitude","lat","apiUrl","axios","get","then","load","App","isDarkModeEnabled","setIsDarkModeEnabled","setWeatherData","coord","main","speed","name","iconUrl","apiKey","position","coords","long","locationUrl","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e139528.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function WeatherTemperature(props) {\nreturn (\n  <div className=\"WeatherTemperature\">\n    <span className=\"temperature-number\">\n      {props.celsius}\n      <span className=\"temperature-unit\">Â°C</span>\n    </span>\n  </div>\n);\n    \n}\n","import React from \"react\";\nimport cloudy from \"@bybas/weather-icons/design/fill/animation-ready/cloudy.svg\";\nimport clearDay from \"@bybas/weather-icons/design/fill/animation-ready/clear-day.svg\";\nimport clearNight from \"@bybas/weather-icons/design/fill/animation-ready/clear-night.svg\";\nimport partlyCloudyDay from \"@bybas/weather-icons/design/fill/animation-ready/partly-cloudy-day.svg\";\nimport partlyCloudyNight from \"@bybas/weather-icons/design/fill/animation-ready/partly-cloudy-night.svg\";\nimport rain from \"@bybas/weather-icons/design/fill/animation-ready/rain.svg\";\nimport partlyCloudyDayRain from \"@bybas/weather-icons/design/fill/animation-ready/partly-cloudy-day-rain.svg\";\nimport partlyCloudyNightRain from \"@bybas/weather-icons/design/fill/animation-ready/partly-cloudy-night-rain.svg\";\nimport partlyCloudyDaySnow from \"@bybas/weather-icons/design/fill/animation-ready/partly-cloudy-day-snow.svg\";\nimport partlyCloudyNightSnow from \"@bybas/weather-icons/design/fill/animation-ready/partly-cloudy-night-snow.svg\";\nimport thunderstorms from \"@bybas/weather-icons/design/fill/animation-ready/thunderstorms.svg\";\nimport mist from \"@bybas/weather-icons/design/fill/animation-ready/mist.svg\";\n\nexport default function WeatherIcon(props) {\n\nconst codeMapping = {\n\t\t\"01d\": clearDay,\n\t\t\"01n\": clearNight,\n\t\t\"02d\": partlyCloudyDay,\n\t\t\"02n\": partlyCloudyNight,\n\t\t\"03d\": cloudy,\n\t\t\"03n\": cloudy,\n\t\t\"04d\": cloudy,\n\t\t\"04n\": cloudy,\n\t\t\"09d\": rain,\n\t\t\"09n\": rain,\n\t\t\"10d\": partlyCloudyDayRain,\n\t\t\"10n\": partlyCloudyNightRain,\n\t\t\"11d\": thunderstorms,\n\t\t\"11n\": thunderstorms,\n\t\t\"13d\": partlyCloudyDaySnow,\n\t\t\"13n\": partlyCloudyNightSnow,\n\t\t\"50d\": mist,\n\t\t\"50n\": mist\n\t};\n\n      return (\n        <li>\n          <img src={codeMapping[props.code]} alt={props.alt} />\n        </li>\n      );\n\n}","import React from \"react\";\nimport \"./CurrentWeather.css\";\nimport WeatherTemperature from \"./WeatherTemperature\";\nimport WeatherIcon from \"./WeatherIcon\";\nimport { FaWind } from \"react-icons/fa\";\nimport { WiHumidity } from \"react-icons/wi\";\n\nexport default function CurrentWeather(props) {\n  if (props.weatherData.ready) {\n    return (\n      <div className=\"current-weather\">\n        <div className=\"body row\">\n          <div className=\"col-md-3 col-6 current-weather-info\">\n            <ul>\n              <li>\n                <WeatherTemperature celsius={props.weatherData.temperature} />\n              </li>\n              <li className=\"text-left text-capitalize \">\n                <p>{props.weatherData.description}</p>\n              </li>\n              <li className=\"current-weather-icon\">\n                <WeatherIcon\n                  code={props.weatherData.icon}\n                  alt={props.weatherData.description}\n                />\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-md d-none d-md-block\">&nbsp;</div>\n          <div className=\"col-md-3 col-6 current-weather-description\">\n            <ul>\n              <li>\n                <WiHumidity /> {props.weatherData.humidity}%\n              </li>\n              <li>\n                <FaWind /> {props.weatherData.wind} km/h\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return \"Loading...\";\n  }\n}\n","import React, { useState } from \"react\";\nimport { FaMapMarkerAlt } from \"react-icons/fa\";\nimport { FaSearch } from \"react-icons/fa\";\nimport \"./Search.css\";\n\nexport default function Search(props) {\n  const [city, setCity] = useState(\"\");\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    props.searchByCity(city);\n  }\n\n  function handleCityChange(event) {\n    setCity(event.target.value);\n  }\n\n  function handleLocationClick() {\n    \n      navigator.geolocation.getCurrentPosition(props.searchByLocation);\n\n  }\n  return (\n    <div className=\"city-search\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"search\"\n          placeholder=\"Search city here\"\n          className=\"search-input\"\n          onChange={handleCityChange}\n        />\n        <button type=\"submit\" className=\"search-button\">\n          <FaSearch />\n        </button>\n        <button type=\"submit\" className=\"current-button\" onClick={handleLocationClick}>\n          <FaMapMarkerAlt />\n        </button>\n      </form>\n    </div>\n  );\n}\n","import \"./Toggle.css\";\n\nexport default function Toggle(props){\n\nfunction handleClick(event) {\n  const isChecked = event.target.checked;\n  props.toggleHandler(isChecked);\n  /* if (isChecked) {\n    weatherapp.classList.add(\"dark-theme\");\n  } else {\n    weatherapp.classList.remove(\"dark-theme\");\n  } */\n}\n\n  return (\n    <div className=\"toggle d-none d-md-block\">\n      <input type=\"checkbox\" id=\"toggle\" onChange={handleClick} />\n      <label for=\"toggle\"></label>\n    </div>\n  );\n};","import React from \"react\";\n\nexport default function FormattedDate(props) {\n  if (props.date) {\n      let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n      let month = months[props.date.getMonth()];\n      let date = props.date.getDate();\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    let day = days[props.date.getDay()];\n    let hours = props.date.getHours();\n    if (hours < 10) {\n        hours = `0${hours}`;\n    }\n\n    let minutes = props.date.getMinutes();\n    if (minutes < 10) {\n        minutes = `0${minutes}`;\n    }\n    return (\n      <div>\n        {day} {date} {month} {hours}:{minutes}\n      </div>\n    );\n  } else {\n    return \"loading\";\n  }\n}\n","import React from \"react\";\nimport WeatherIcon from \"./WeatherIcon\";\n\nexport default function WeatherForecastDay(props) {\n    function maxTemp() {\n        let temperature = Math.round(props.data.temp.max);\n        return `${temperature}Â°`;\n    }\n     function minTemp() {\n       let temperature = Math.round(props.data.temp.min);\n       return `${temperature}Â°`;\n     }\n\n     function day() {\n         let date = new Date(props.data.dt * 1000);\n         let day = date.getDay();\n        \n         let days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n\n\n         return days[day];\n\n     }\n    return (\n      <div>\n        <div className=\"WeatherForecast-day\">{day()}</div>\n        <div className=\"WeatherForecast-icon\">\n          {\" \"}\n          <WeatherIcon code={props.data.weather[0].icon} />\n        </div>\n        <div className=\"WeatherForecast-temperatures\">\n          <span className=\"WeatherForecast-temperatures-max forecast-temps\">\n            {maxTemp()}\n          </span>{\" \"}\n          <span className=\"WeatherForecast-temperatures-min forecast-temps\">\n            {minTemp()}\n          </span>\n        </div>\n      </div>\n    );\n}","import React, { useState, useEffect } from \"react\";\nimport \"./WeatherForecast.css\";\nimport axios from \"axios\";\nimport WeatherForecastDay from \"./WeatherForecastDay\";\n\nexport default function WeatherForecast(props) {\n  let [loaded, setLoaded] = useState(false);\n  let [forecast, setForecast] = useState(null);\n\n  useEffect(() => {\n    setLoaded(false);\n  }, [props.coordinates]) \n\n  function handleResponse(response) {\n    console.log(response.data);\n    setForecast(response.data.daily);\n    setLoaded(true);\n  }\n\n  function load() {\n    let apiKey = \"37d0f96cd930737aa442037348f7a9bd\";\n    let longitude = props.coordinates.lon;\n    let latitude = props.coordinates.lat;\n    let apiUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&appid=${apiKey}&units=metric`;\n\n    axios.get(apiUrl).then(handleResponse);\n  }\n\n  if (loaded) {\n    return (\n      <div className=\"WeatherForecast\">\n        <div className=\"row\">\n          {forecast.map(function (dailyForecast, index) {\n            if (index < 6) {\n              return (\n                <div className=\"col-6 col-md-2\" key\n                ={index}>\n                  <WeatherForecastDay data={dailyForecast} />\n                </div>\n              );\n            } else {\n              return null;\n            }\n          })}\n        </div>\n      </div>\n    );\n  } else {\n    load();\n\n    return null;\n  }\n}\n","import React, { useState } from \"react\";\nimport CurrentWeather from \"./CurrentWeather\";\nimport Search from \"./Search\";\nimport Toggle from \"./Toggle\";\nimport FormattedDate from \"./FormattedDate\";\nimport WeatherForecast from \"./WeatherForecast\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\n\nexport default function App() {\n  const [isDarkModeEnabled, setIsDarkModeEnabled] = useState(false);\n  const [weatherData, setWeatherData] = useState({ ready: false });\n\n  function handleResponse(response) {\n    setWeatherData({\n      ready: true,\n      coordinates: response.data.coord,\n      temperature: Math.round(response.data.main.temp),\n      wind: response.data.wind.speed,\n      date: new Date(response.data.dt * 1000),\n      city: response.data.name,\n      humidity: response.data.main.humidity,\n      description: response.data.weather[0].description,\n      icon: response.data.weather[0].icon,\n      iconUrl: `http://openweathermap.org/img/wn/${response.data.weather[0].icon}@2x.png`,\n    });\n  }\n\n  const apiKey = \"37d0f96cd930737aa442037348f7a9bd\";\n\n  const searchByCity = (city) => {\n    let apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;\n    axios.get(apiUrl).then(handleResponse);\n  };\n\n  const searchByLocation = (position) => {\n    let lat = position.coords.latitude;\n    let long = position.coords.longitude;\n    let locationUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${apiKey}&units=metric`;\n\n    axios.get(locationUrl).then(handleResponse);\n  };\n\n  if (weatherData.ready === false) {\n    searchByCity(\"London\");\n    return <div className=\"App\">Loading...</div>;\n  } else {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"outerdiv\">\n            <div\n              className={\n                \"weatherapp\" + (isDarkModeEnabled ? \" dark-theme\" : \"\")\n              }\n            >\n              <div className=\"background-image-area\">\n                <div className=\"header row location-date\">\n                  <div className=\"col-12 col-md-5\">\n                    <h1>\n                      {weatherData.ready ? weatherData.city : \"Loading...\"}\n                    </h1>\n                    <FormattedDate date={weatherData.date} />\n                  </div>\n                  <div className=\"col-12 col-md-7 d-flex flex-row justify-content-end\">\n                    <Search\n                      searchByCity={searchByCity}\n                      searchByLocation={searchByLocation}\n                    />\n                    <Toggle toggleHandler={setIsDarkModeEnabled} />\n                  </div>\n                </div>\n                <CurrentWeather weatherData={weatherData} />\n              </div>\n              <WeatherForecast coordinates={weatherData.coordinates} />\n            </div>\n\n            <div className=\"footer row\"> </div>\n          </div>\n          <p className=\"github-link\">\n            <a\n              href=\"https://github.com/alemosmusi/react-weather-app\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Open-source code\n            </a>{\" \"}\n            by Agustin Lemos\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}